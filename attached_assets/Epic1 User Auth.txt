# Epic 1: User Registration & Auth

**Goal:** Enable secure, frictionless onboarding and authentication for all user roles—Property Owners, Landscapers, and Admins—establishing foundational access control for the LawnMates platform.

## Story List

### Story 1.1: Email/Password Signup with Role Selection

* **User Story / Goal:** As a new user, I want to sign up with my email and choose my role so that I can access relevant features.
* **Detailed Requirements:**

  * Signup form with email, password, and role dropdown (Owner, Landscaper, Admin)
  * Unique email validation
  * Terms acceptance checkbox
  * Role-based redirect upon signup
* **Acceptance Criteria (ACs):**

  * AC1: New users can create an account with valid credentials and role
  * AC2: Validation errors are shown for missing fields, duplicate emails
  * AC3: Users are redirected to role-appropriate onboarding after signup
* **Tasks:**

  * [ ] Design and implement signup UI
  * [ ] Implement backend endpoint for signup
  * [ ] Integrate Supabase auth or custom JWT setup

---

### Story 1.2: Email Verification Post-Signup

* **User Story / Goal:** As a user, I want to verify my email after signing up so that I can activate my account securely.
* **Detailed Requirements:**

  * Email verification link sent upon signup
  * Account remains inactive until verified
  * UI feedback when awaiting verification
* **Acceptance Criteria (ACs):**

  * AC1: Verification email is sent on signup
  * AC2: Link activates user account and redirects to login
  * AC3: Unverified users are blocked from accessing dashboard
* **Tasks:**

  * [ ] Configure email service with Supabase/SendGrid
  * [ ] Implement verification flow on backend
  * [ ] Create verification UI states

---

### Story 1.3: JWT-Based Login and Session Management

* **User Story / Goal:** As a returning user, I want to log in securely and stay logged in during my session.
* **Detailed Requirements:**

  * Login form with email and password
  * Secure session token returned on login
  * Token includes role-based claims
  * Session expiry and renewal logic
* **Acceptance Criteria (ACs):**

  * AC1: Users can log in with correct credentials
  * AC2: JWT contains accurate user role and expiry timestamp
  * AC3: Expired tokens force logout and redirect
* **Tasks:**

  * [ ] Create login UI
  * [ ] Implement JWT issuance and validation middleware
  * [ ] Handle session refresh and expiration

---

### Story 1.4: Role-Based Access Control (RBAC)

* **User Story / Goal:** As a platform user, I want to see and access only the features relevant to my role so that I’m not confused or exposed to irrelevant tools.
* **Detailed Requirements:**

  * Route guards for dashboards and features
  * Roles: Property Owner, Landscaper, Admin
  * Frontend and backend role enforcement
* **Acceptance Criteria (ACs):**

  * AC1: Users only see pages/actions based on their assigned role
  * AC2: Direct access to unauthorized routes shows error
  * AC3: Admins have full override access
* **Tasks:**

  * [ ] Define route protection logic
  * [ ] Implement role checks in API endpoints
  * [ ] Test unauthorized access cases

---

## Change Log

| Change        | Date       | Version | Description                       | Author  |
| ------------- | ---------- | ------- | --------------------------------- | ------- |
| Initial draft | 2025-05-08 | 0.1     | Initial epic and stories for auth | ChatGPT |
