# LawnMates Full Story Set (Epics 7‚Äì12)

...(Epics 7‚Äì12 stories remain unchanged)...

---

## Epic 11: Advanced Admin & Analytics

### Story 11.1: Geo/Job Heatmaps and Filterable Dashboards

**Status:** Draft

## Goal & Context

**User Story:** As an admin, I want to see geographic and historical job trends, so I can make informed operational decisions.

**Context:** Improves admin oversight by visualising where and when jobs are active.

## Detailed Requirements

* Add heatmap layer to admin dashboard
* Fetch job location and timestamp data
* Filter by role, status, and time period

## Acceptance Criteria (ACs)

* AC1: Heatmap visualises job density by location
* AC2: Dashboard filters by time and job status
* AC3: Supports toggle between map and list modes

## Technical Implementation Context

* **Relevant Files:**

  * `src/features/admin/AnalyticsMap.tsx`
  * `pages/api/admin/jobs.ts`

* **Key Technologies:**

  * Mapbox or Leaflet, Supabase

* **API Interactions:**

  * GET jobs with lat/lng, createdAt

* **Data Structures:**

  * `Job.location` (geocoded address or coordinates)

## Tasks / Subtasks

* [ ] Add map visualisation component
* [ ] Build API to serve geo-stats
* [ ] Wire filters to map/dashboard

## Testing Requirements

* **Unit Tests:** Filter logic
* **Integration Tests:** Job data ‚Üí map rendering
* **E2E:** Admin filter jobs by region/date

---

### Story 11.2: Auto-Detect Anomalies (e.g. Dispute Spikes)

**Status:** Draft

## Goal & Context

**User Story:** As an admin, I want to be alerted to unusual patterns, so that I can act on potential abuse or fraud.

**Context:** Automates identification of risky user behaviour using rule-based or statistical triggers.

## Detailed Requirements

* Define rule set: e.g., >3 disputes/user in 7 days
* Create dashboard tile for anomalies
* Optional: send notification to admins

## Acceptance Criteria (ACs)

* AC1: Admin dashboard shows flagged anomalies
* AC2: Rules evaluated daily or on update
* AC3: Actionable insights include user/job IDs

## Technical Implementation Context

* **Relevant Files:**

  * `core/analytics/anomalyRules.ts`
  * `src/features/admin/AnomalyDashboard.tsx`

* **Key Technologies:**

  * Supabase queries, server cron job or trigger

* **API Interactions:**

  * Scheduled query on disputes, jobs, messages

* **Data Structures:**

  * `Dispute`, `User`, `Job`

## Tasks / Subtasks

* [ ] Define and implement anomaly rules
* [ ] Build query pipeline and test outputs
* [ ] Display findings in admin UI

## Testing Requirements

* **Unit Tests:** Rule evaluation
* **Integration Tests:** Cross-table joins
* **E2E:** View flagged anomalies in dashboard

---

### Story 11.3: Add Admin Roles/Permissions Matrix

**Status:** Draft

## Goal & Context

**User Story:** As a system admin, I want to manage which admins have access to which tools, so that we can enforce proper separation of duties.

**Context:** Expands RBAC to differentiate admin roles (moderator, finance, superadmin).

## Detailed Requirements

* Add `admin_roles` column to `User`
* UI to grant/revoke roles
* Conditional rendering of admin tools by role

## Acceptance Criteria (ACs)

* AC1: Admin users see only tools they are permitted to use
* AC2: Superadmin can grant/revoke roles
* AC3: Role assignments stored in DB

## Technical Implementation Context

* **Relevant Files:**

  * `common/types/user.ts`, `src/features/admin/RoleManager.tsx`

* **Key Technologies:**

  * Supabase RLS, React

* **API Interactions:**

  * Admin roles table/query updates

* **Data Structures:**

  * `User.admin_role: 'moderator' | 'finance' | 'superadmin'`

## Tasks / Subtasks

* [ ] Extend user table and types
* [ ] Build UI for superadmin role manager
* [ ] Apply conditional logic across admin tools

## Testing Requirements

* **Unit Tests:** Role-based rendering logic
* **Integration Tests:** DB read/write for role updates
* **E2E:** Superadmin grants new admin role

---

## üèÅ LawnMates Sprint 3 Plan

## üèÅ LawnMates Sprint 3 Plan ‚Äì Trust, Loyalty, and Mobile Foundations

...(Sprint 3 plan remains unchanged)...

---

## ‚úÖ Sprint 3 Acceptance Test Checklist

### Story 7.1 ‚Äì Leave Review Modal

* [ ] Modal appears after job marked complete
* [ ] Star rating and comment required
* [ ] Review saved in Supabase with correct job ID
* [ ] Reviewer cannot re-review same job

### Story 8.2 ‚Äì Favorite Landscaper or Property

* [ ] Toggle button appears on profile/job view
* [ ] Clicking saves/removes from favorites
* [ ] Favorite list shows up in dashboard
* [ ] State updates instantly on toggle

### Story 9.1 ‚Äì Monthly Recurring Jobs

* [ ] Toggle appears on job post form
* [ ] Job stored with `recurring = true`
* [ ] Supabase job clones it monthly (simulate one)
* [ ] New job shows original job‚Äôs metadata

### Story 9.2 ‚Äì Loyalty Points

* [ ] Points increment after successful payout
* [ ] Value visible in user dashboard
* [ ] Only adds for completed jobs
* [ ] Initial value defaults to 0

### Story 10.1 ‚Äì PWA Install and Offline

* [ ] Install prompt appears on mobile
* [ ] App installs with LawnMates icon
* [ ] Dashboard loads offline after first visit
* [ ] Pages cached include: login, dashboard, job list

### Story 12.1 ‚Äì Photo Trust Classifier (Stub)

* [ ] Photo upload triggers scoring function
* [ ] Mock API assigns random trust score
* [ ] Score saved in Supabase DB
* [ ] Flagged photos marked below threshold (<0.5)

---

## üìã Jira/Linear Ticket Templates ‚Äì Sprint 3

### üü© Story 7.1 ‚Äì Leave Review Modal

**Summary:** Add modal to submit reviews post-job completion
**Scope:** FE modal + BE POST /api/reviews
**Files:** ReviewModal.tsx, pages/api/reviews.ts
**Test:** Submit valid + invalid review, RLS access control

### ‚≠ê Story 8.2 ‚Äì Favorite Landscaper or Property

**Summary:** Toggle and store favorite users
**Scope:** FE toggle + BE storage + dashboard list
**Files:** FavoriteToggle.tsx, DashboardFavorites.tsx, /api/favorites.ts
**Test:** Add/remove favorite, list renders correctly

### üîÅ Story 9.1 ‚Äì Monthly Recurring Jobs

**Summary:** Flag jobs as recurring and schedule clones
**Scope:** Extend job model + Supabase cron job
**Files:** JobPostForm.tsx, cron/jobCloner.ts
**Test:** Form input, job clone confirmed in DB

### üéñÔ∏è Story 9.2 ‚Äì Loyalty Points System

**Summary:** Add `loyalty_points` to user and increment on payout
**Scope:** Stripe webhook + Supabase update
**Files:** payout.ts, userSchema.sql
**Test:** Manual payout event ‚Üí points +1

### üì≤ Story 10.1 ‚Äì PWA Support

**Summary:** Create manifest + SW to support offline use + install
**Scope:** public/manifest.json, SW logic, icon set
**Files:** manifest.json, serviceWorker.ts
**Test:** PWA audit via Lighthouse, mobile install test

### üß† Story 12.1 ‚Äì Trust Score Stub

**Summary:** Add mock trust score field on photo upload
**Scope:** Add field, simulate ML scoring
**Files:** photoUpload.ts, photoTrust.ts
**Test:** Upload ‚Üí score appears ‚Üí flagged if < 0.5

---

These can be copied into Jira/Linear fields and linked to their respective Story # from the doc.
